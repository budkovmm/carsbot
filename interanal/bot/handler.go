package bot

import (
	"fmt"
	"strings"

	"gopkg.in/telebot.v4"
)

func RegisterHandlers(b *telebot.Bot) {
	b.Handle("/start", func(c telebot.Context) error {
		msg := "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n" +
			"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
		markup := &telebot.ReplyMarkup{}
		btnStart := markup.Text("–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
		markup.Reply(markup.Row(btnStart))
		return c.Send(msg, markup)
	})

	b.Handle(telebot.OnText, func(c telebot.Context) error {
		userID := c.Sender().ID
		state, ok := userStates[userID]

		if !ok {
			if c.Text() == "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä" {
				state = &UserState{Step: 0}
				userStates[userID] = state
			} else {
				return nil // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			}
		}

		switch state.Step {
		case 0:
			state.Step = 1
			return c.Send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ.\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞:")
		case 1:
			state.SellerName = c.Text()
			state.Step = 2
			return c.Send("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
		case 2:
			state.BuyerName = c.Text()
			state.Step = 3
			return c.Send("–í–≤–µ–¥–∏—Ç–µ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
		case 3:
			state.VIN = c.Text()
			state.Step = 4
			return c.Send("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
		case 4:
			state.BrandModel = c.Text()
			state.Step = 5
			return c.Send("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
		case 5:
			state.Year = c.Text()
			state.Step = 6
			return c.Send("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
		case 6:
			state.Color = c.Text()
			state.Step = 7
			return c.Send("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ —Ä—É–±–ª—è—Ö):")
		case 7:
			state.Price = c.Text()
			state.Step = 8
			return c.Send("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.06.2024):")
		case 8:
			state.Date = c.Text()
			state.Step = 9
			return c.Send("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:")
		case 9:
			state.City = c.Text()
			// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–æ–º
			var sb strings.Builder
			sb.WriteString("–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–µ–ª–∏:\n")
			sb.WriteString(fmt.Sprintf("–§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞: %s\n", state.SellerName))
			sb.WriteString(fmt.Sprintf("–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n", state.BuyerName))
			sb.WriteString(fmt.Sprintf("VIN: %s\n", state.VIN))
			sb.WriteString(fmt.Sprintf("–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: %s\n", state.BrandModel))
			sb.WriteString(fmt.Sprintf("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: %s\n", state.Year))
			sb.WriteString(fmt.Sprintf("–¶–≤–µ—Ç: %s\n", state.Color))
			sb.WriteString(fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %s —Ä—É–±.\n", state.Price))
			sb.WriteString(fmt.Sprintf("–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏: %s\n", state.Date))
			sb.WriteString(fmt.Sprintf("–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏: %s\n", state.City))
			delete(userStates, userID)
			return c.Send(sb.String())
		default:
			delete(userStates, userID)
			return c.Send("–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞:")
		}
	})

	b.Handle("/help", func(c telebot.Context) error {
		helpMsg := "‚ÑπÔ∏è –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n" +
			"/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
			"/reset ‚Äî –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n" +
			"/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."
		return c.Send(helpMsg)
	})

	b.Handle("/reset", func(c telebot.Context) error {
		userID := c.Sender().ID
		delete(userStates, userID)
		return c.Send("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
	})
}
