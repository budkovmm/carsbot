package bot

import (
	"carsbot/internal/fsm"
	"carsbot/internal/state"

	"gopkg.in/telebot.v4"
)

type Handler struct {
	storage state.StateStorage
	fsm     fsm.FSM
	msg     *MessageGenerator
}

func NewHandler(storage state.StateStorage, fsm fsm.FSM, msg *MessageGenerator) *Handler {
	return &Handler{storage: storage, fsm: fsm, msg: msg}
}

func (h *Handler) Register(b *telebot.Bot) {
	b.Handle("/start", func(c telebot.Context) error {
		return c.Send("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
	})

	b.Handle(telebot.OnText, func(c telebot.Context) error {
		userID := c.Sender().ID
		st, _ := h.storage.Get(userID)
		if st == nil {
			st = &state.UserState{Step: 0}
			h.storage.Set(userID, st)
		}
		resp, _ := h.fsm.NextStep(st, c.Text())
		h.storage.Set(userID, st)
		return c.Send(resp)
	})

	b.Handle("/reset", func(c telebot.Context) error {
		userID := c.Sender().ID
		h.storage.Delete(userID)
		return c.Send("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
	})

	b.Handle("/help", func(c telebot.Context) error {
		helpMsg := "‚ÑπÔ∏è –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n" +
			"/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
			"/reset ‚Äî –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n" +
			"/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."
		return c.Send(helpMsg)
	})
}
